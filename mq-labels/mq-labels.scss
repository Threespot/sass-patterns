/* Convert value to px */
@function px( $val ) {
	// Return value if already in pixels
	@if unit( $val ) == 'px' {
		@return $val;
	}
	// Otherwise, strip units and convert to px
	// http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass
	@else {
		@return $val / ($val * 0 + 1) * 1px;
	}
}

/* Convert px to em */
@function em( $px, $base: 16px ) {
	@return ( px($px) / px($base) ) * 1em;
}


/* Add Breakpoint Labels (for use in JS) */

$fixed-width: false !default;

// References:
// http://adactio.com/journal/5429/
// http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32
// https://github.com/registerguard/js-media-queries

// Default breakpoints if not defined
$breakpoints: small,
              medium 768,
              large 960 !default;

// Get number of breakpoints
$break-count: length($breakpoints);

// Iterate through breakpoints
@mixin mq-breakpoints( $font-stack: "'Helvetica Neue', Arial, Helvetica, sans-serif" ) {

	// Fallback label
	html { font-family: "#{nth( nth($breakpoints, 1), 1 )}" }

	// Override <html> inheritance.
	body { font-family: #{$font-stack} }

	body:after {
		content: "#{nth( nth($breakpoints, 1), 1 )}";
		display: none;
	}

	// Get number of breakpoints
	$break-count: length($breakpoints);
	
	// Create index var to use in @each loop
	$index: 1;
	
	// Loop through each breakpoint and generated the appropriate media query code
	// Set the font-family on the pseudo element, as iOS 4 cannot get the CSS content with JS
	@each $break in $breakpoints {
		// First breakpoint
		@if $index == 1 {
			// Get next breakpoint width, subtract 1px
			$max-width: nth( nth($breakpoints, $index + 1), 2 ) - 1;

			@media ( max-width: em( $max-width ) )  {
				html { font-family: '#{nth($break, 1)}' }
				body:after { content: '#{nth($break, 1)}' }
			};
		}
		// Last breakpoint
		@else if $index == $break-count {
			@media ( min-width: em( nth($break, 2) ) ) {
				html { font-family: '#{nth($break, 1)}' }
				body:after { content: '#{nth($break, 1)}' }
			};
		}
		// All other breakpoints
		@else {
			// Get next breakpoint width, subtract 1px
			$max-width: nth( nth($breakpoints, $index + 1), 2 ) - 1;
			
			@media ( min-width: em( nth($break, 2) ) ) and ( max-width: em( $max-width ) ) {
				html { font-family: '#{nth($break, 1)}' }
				body:after { content: '#{nth($break, 1)}' }
			};
		}
		
		// Increment counter
		$index: $index + 1;
	}
}
