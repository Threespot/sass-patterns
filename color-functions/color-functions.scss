// Convert any color format to plain RGB
@function get-rgb( $color ) {
	@return rgb( red($color), green($color), blue($color) );
}


// Mix translucent color with background to make a flat color for IE
// Reference: https://github.com/rhysburnie/skeleton-compass/blob/master/stylesheets/bones/utilities/_color.scss
@function color-flatten( $color, $bg-color: white ) {
	// Get opacity of color, convert to percentage
	$weight: percentage( alpha($color) );
	// Mix new flat color
	@return mix( get-rgb($color), $bg-color, $weight );
}


// Set old IE flag if not already defined
$old-ie: false !default;

// Convert any color format to RGBA, with fallback for old IE and optional background color to mix
// Usage: color-alpha( #abc, 0.5) ) => rgba(170, 187, 204, 0.5) or #d4dde5 for old IE
@function color-alpha( $color, $opacity: none, $bg-color: white, $flat: false ) {
	
	// Check the arguments passed
	// If color already has alpha value (e.g. rgba, hlsa)
	@if alpha( $color ) < 1 {
		// Then check if a second argument was passed
		@if $opacity == 'none' {
			// If no second argumentm, set the opacity as the alpha value
			$opacity: alpha( $color );
		}
		// If second argument is a color
		@else if type-of( $opacity ) == 'color' {
			// Set the bg-color
			$bg-color: $opacity;
			// Set the opacity
			$opacity: alpha( $color );
		}
	}
	
	// Output flat color for IE
	@if $flat or $old-ie {
		// Return flattened color
		@return color-flatten( rgba( $color, $opacity ), $bg-color );
	}
	// Otherwise, return RGBA
	@else {
		@return rgba( $color, $opacity );
	}
}

// RGBA black shorthand
@function black( $opacity ) {
	@return color-alpha( black, $opacity );
}

// RGBA white shorthand
@function white( $opacity ) {
	@return color-alpha( white, $opacity );
}


// Same as color-alpha() function above, but generates both the fallback and modern CSS for any property
// Use if not creating a separate old IE stylesheet, otherwise, use color-alpha()
@mixin color-prop( $prop, $value, $opacity: 'none', $bg-color: white ) {

	// Set color to $value by default
	$color: $value;
	
	// Location in array of color value
	$colorNth: 1;
	
	// Count values passed
	$valCount: length($value);

	// If mulitple values were passed, determine which is the color
	// (used for shorthand CSS, like "1px solid #ccc" for border)
	@if $valCount > 1 {
		$counter: 1;
		// Loop through values
		@each $val in $value {
			// Check if value is a color
			@if type-of($val) == color {
				// Update color value
				$color: $val;
				// Save location of color in array
				$colorNth: $counter;
			}
			// Increment counter
			$counter: $counter + 1;
		}
	}
	
	// Check if color already has an alpha value
	@if alpha( $color ) < 1 {
		// Then check if an opacity value was passed
		@if $opacity == 'none' {
			// If no opacity, use the color's alpha value
			$opacity: alpha( $color );
		}
	}
	
	// Generate new colors values
	$flatColor: color-alpha( $color, $opacity, $bg-color, true ); // e.g. #cccccc
	$alphaColor: color-alpha( $color, $opacity, $bg-color, false ); // e.g. rgba(0, 0, 0, 0.2)
	
	// Define new values
	$flatVal: '';
	$alphaVal: '';
	
	// Rewrite values if multiple were passed
	@if ( $valCount > 1 ) {
		$counter: 1;
		// Loop though original values and replace the color
		@each $val in $value {
			// If current val is the color, replace it
			@if ( $colorNth == $counter ) {
				// Replace with flat color
				$flatVal: $flatVal + ' ' + $flatColor;
				// Replace with alpha color
				$alphaVal: $alphaVal + ' ' + $alphaColor;
			}
			@else {
				$flatVal: $flatVal + ' ' + $val;
				$alphaVal: $alphaVal + ' ' + $val;
			}
		
			// Increment counter
			$counter: $counter + 1;
		}
	}
	@else {
		$flatVal: $flatColor;
		$alphaVal: $alphaColor;
	}
	
	@debug $flatVal;
	@debug $alphaVal;
	
	// Output CSS
	#{$prop}: unquote( $flatVal ); // Fallback HEX
	#{$prop}: unquote( $alphaVal ); // RGBA
} 
